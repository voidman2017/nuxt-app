
import CONF from "~/config";
import Ajax , {commonAjax}  from "~/lib/ajax";
class DETAIL {
  /**
   *
   * @param {*} id 详情id
   */
  async getDetailNav(id) {
    return await commonAjax({
      url: `${CONF.PREFIX.TRC}/trc_news/front/detail/navigation_crumb/${id}`,
      type: "GET",
    }).get('data').then((data = {}) => {
      return {"navigation":{"id":19,"name":"互联网金融","subNavigations":[{"subId":22,"subName":"政策法规"},{"subId":23,"subName":"网贷资讯"},{"subId":24,"subName":"p2p网贷"},{"subId":25,"subName":"网贷平台"}]},"crumb":{"firstName":"互联网金融","secondName":"政策法规","subId":"22"}}
      return data;
    })
  }

  /**
   *
   * @param {*} id 详情id
   */
  async getArticleDetail(id) {
    return await commonAjax({
      url: `${CONF.PREFIX.TRC}/trc_news/front/detail/${id}`,
      type: "GET",
    }).get('data').then((data = {}) => {
      return {"id":77,"title":"Vue项目的开发速度","summary":"巧用Webpack\n","content":"<h2 id=\"组件化应用构建\"><a class=\"headerlink\" title=\"组件化应用构建\" href=\"https://cn.vuejs.org/v2/guide/#%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BA%94%E7%94%A8%E6%9E%84%E5%BB%BA\" data-scroll=\"\">组件化应用构建</a></h2>\n<div class=\"scrimba\"><a href=\"https://scrimba.com/p/pXKqta/cEQVkA3\" target=\"_blank\" rel=\"noopener noreferrer\">在 Scrimba 上尝试这节课</a></div>\n<p>组件系统是 Vue 的另一个重要概念，因为它是一种抽象，允许我们使用小型、独立和通常可复用的组件构建大型应用。仔细想想，几乎任意类型的应用界面都可以抽象为一个组件树：</p>\n<p><img src=\"https://cn.vuejs.org/images/components.png\" alt=\"Component Tree\" /></p>\n<p>在 Vue 里，一个组件本质上是一个拥有预定义选项的一个 Vue 实例。在 Vue 中注册组件很简单：</p>\n<figure class=\"highlight js\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\"><span class=\"comment\">// 定义名为 todo-item 的新组件</span></span><br /><span class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, {</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;li&gt;这是个待办项&lt;/li&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>现在你可以用它构建另一个组件模板：</p>\n<figure class=\"highlight html\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"comment\">&lt;!-- 创建一个 todo-item 组件的实例 --&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">todo-item</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>但是这样会为每个待办项渲染同样的文本，这看起来并不炫酷。我们应该能从父作用域将数据传到子组件才对。让我们来修改一下组件的定义，使之能够接受一个&nbsp;<a href=\"https://cn.vuejs.org/v2/guide/components.html#Props\">prop</a>：</p>\n<figure class=\"highlight js\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, {</span><br /><span class=\"line\">  <span class=\"comment\">// todo-item 组件现在接受一个</span></span><br /><span class=\"line\">  <span class=\"comment\">// \"prop\"，类似于一个自定义特性。</span></span><br /><span class=\"line\">  <span class=\"comment\">// 这个 prop 名为 todo。</span></span><br /><span class=\"line\">  props: [<span class=\"string\">'todo'</span>],</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br /><span class=\"line\">})</span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<p>现在，我们可以使用&nbsp;<code>v-bind</code>&nbsp;指令将待办项传到循环输出的每个组件中：</p>\n<figure class=\"highlight html\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app-7\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br /><span class=\"line\"><span class=\"comment\">      现在我们为每个 todo-item 提供 todo 对象</span></span><br /><span class=\"line\"><span class=\"comment\">      todo 对象是变量，即其内容可以是动态的。</span></span><br /><span class=\"line\"><span class=\"comment\">      我们也需要为每个组件提供一个&ldquo;key&rdquo;，稍后再</span></span><br /><span class=\"line\"><span class=\"comment\">      作详细解释。</span></span><br /><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">todo-item</span></span></span><br /><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-for</span>=<span class=\"string\">\"item in groceryList\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:todo</span>=<span class=\"string\">\"item\"</span></span></span><br /><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">v-bind:key</span>=<span class=\"string\">\"item.id\"</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">todo-item</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<figure class=\"highlight js\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\">Vue.component(<span class=\"string\">'todo-item'</span>, {</span><br /><span class=\"line\">  props: [<span class=\"string\">'todo'</span>],</span><br /><span class=\"line\">  template: <span class=\"string\">'&lt;li&gt;{{ todo.text }}&lt;/li&gt;'</span></span><br /><span class=\"line\">})</span><br /><br /><span class=\"line\"><span class=\"keyword\">var</span> app7 = <span class=\"keyword\">new</span> Vue({</span><br /><span class=\"line\">  el: <span class=\"string\">'#app-7'</span>,</span><br /><span class=\"line\">  data: {</span><br /><span class=\"line\">    groceryList: [</span><br /><span class=\"line\">      { <span class=\"attr\">id</span>: <span class=\"number\">0</span>, <span class=\"attr\">text</span>: <span class=\"string\">'蔬菜'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">'奶酪'</span> },</span><br /><span class=\"line\">      { <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">'随便其它什么人吃的东西'</span> }</span><br /><span class=\"line\">    ]</span><br /><span class=\"line\">  }</span><br /><span class=\"line\">})</span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<div id=\"app-7\" class=\"demo\">\n<ol>\n<li>蔬菜</li>\n<li>奶酪</li>\n<li>随便其它什么人吃的东西</li>\n</ol>\n</div>\n<p>尽管这只是一个刻意设计的例子，但是我们已经设法将应用分割成了两个更小的单元。子单元通过 prop 接口与父单元进行了良好的解耦。我们现在可以进一步改进&nbsp;<code>&lt;todo-item&gt;</code>&nbsp;组件，提供更为复杂的模板和逻辑，而不会影响到父单元。</p>\n<p>在一个大型应用中，有必要将整个应用程序划分为组件，以使开发更易管理。在<a href=\"https://cn.vuejs.org/v2/guide/components.html\">后续教程</a>中我们将详述组件，不过这里有一个 (假想的) 例子，以展示使用了组件的应用模板是什么样的：</p>\n<figure class=\"highlight html\">\n<table>\n<tbody>\n<tr>\n<td class=\"code\">\n<pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-nav</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-nav</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">app-view</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-sidebar</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-sidebar</span>&gt;</span></span><br /><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app-content</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">app-content</span>&gt;</span></span><br /><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">app-view</span>&gt;</span></span><br /><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></pre>\n</td>\n</tr>\n</tbody>\n</table>\n</figure>\n<h3 id=\"与自定义元素的关系\"><a class=\"headerlink\" title=\"与自定义元素的关系\" href=\"https://cn.vuejs.org/v2/guide/#%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%B3%E7%B3%BB\" data-scroll=\"\">与自定义元素的关系</a></h3>\n<p>你可能已经注意到 Vue 组件非常类似于<strong>自定义元素</strong>&mdash;&mdash;它是&nbsp;<a href=\"https://www.w3.org/wiki/WebComponents/\" target=\"_blank\" rel=\"noopener\">Web 组件规范</a>的一部分，这是因为 Vue 的组件语法部分参考了该规范。例如 Vue 组件实现了&nbsp;<a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" target=\"_blank\" rel=\"noopener\">Slot API</a>&nbsp;与&nbsp;<code>is</code>&nbsp;特性。但是，还是有几个关键差别：</p>\n<ol>\n<li>\n<p>Web Components 规范已经完成并通过，但未被所有浏览器原生实现。目前 Safari 10.1+、Chrome 54+ 和 Firefox 63+ 原生支持 Web Components。相比之下，Vue 组件不需要任何 polyfill，并且在所有支持的浏览器 (IE9 及更高版本) 之下表现一致。必要时，Vue 组件也可以包装于原生自定义元素之内。</p>\n</li>\n<li>\n<p>Vue 组件提供了纯自定义元素所不具备的一些重要功能，最突出的是跨组件数据流、自定义事件通信以及构建工具集成。</p>\n</li>\n</ol>\n<h2 id=\"准备好了吗？\"><a class=\"headerlink\" title=\"准备好了吗？\" href=\"https://cn.vuejs.org/v2/guide/#%E5%87%86%E5%A4%87%E5%A5%BD%E4%BA%86%E5%90%97%EF%BC%9F\" data-scroll=\"\">准备好了吗？</a></h2>\n<p>我们刚才简单介绍了 Vue 核心最基本的功能&mdash;&mdash;本教程的其余部分将涵盖这些功能以及其它高级功能更详细的细节，所以请务必读完整个教程！</p>","originalStatement":"123","linkUrl":null,"publishTime":1544684694000}
      return data;
    })
  }
}

export default new DETAIL;
